1- Принцип единой ответственности(Single responsibility principle)
Например: В service весь UserService , был разбит по отдельным классам.В StudentService мы создавали инфу только по студентам, в StudentGroup создавали только StudentGroup.
А в UserService мы можем  реализовывать в интерфейсе  любых User.
Лучше иметь несколько классов со своей ответственностью, чем супер огромный класс со громадным колличеством строк. 

2- Принцип открытости-закрытости(Open-closed principle)
Например: в data созданы классы User, Teacher,Student, StudentGroup,UserComporator  и тд.
Там можно в классах что -то еще дополнять конкретно но изменять внутренюю реализацию нельзя.Т.е. в классе User мы ничего модифицировать не можем.

3- Принцип подстановки Лисков(Liskov substitution principle)
Например: в data (как мне кажется) родительский класс это User. А Teacher,Student, наследовавшие от класса User. А в UserService ничего не будет нарушаться, даже если мы будем расширять общую базу User-ов


4- Принцип разделения интерфейса(Interface segregation principle) тут пока нет разделения интерфейса
5-Принцип инверсии зависимостей(Dependency inversion principle) У нас есть папка View в которой UserView более высокго уровня и StudentView более низкого уровня. UserView никак не зависит от StudentView.